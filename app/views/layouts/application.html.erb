<!DOCTYPE html>
<html class="h-full bg-gray-100 dark:bg-gray-900">
  <head>
    <title><%= content_for(:title) || "Read Ritual" %></title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="mobile-web-app-capable" content="yes">
    <!-- Fallback for light -->
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#ffffff">
    <!-- Fallback for dark -->
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#0f172a">

    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= yield :head %>

    <%# Enable PWA manifest for installable apps (make sure to enable in config/routes.rb too!) %>
    <%= tag.link rel: "manifest", href: pwa_manifest_path(format: :json) %>

    <link rel="icon" href="/ReadRitualAppIcon_512.png" type="image/png">
    <link rel="apple-touch-icon" href="/ReadRitualAppIcon_512.png">

    <%= stylesheet_link_tag :app, "data-turbo-track": "reload" %>
    <%= javascript_importmap_tags %>
    <%= Sentry.get_trace_propagation_meta.html_safe %>
  </head>

  <body class="h-full text-gray-900 dark:text-gray-100">
    <!-- Navigation Header -->
    <nav class="bg-gray-200 dark:bg-gray-800 p-4 shadow">
      <div class="container mx-auto flex justify-between items-center">
        <a href="/" class="text-xl font-bold text-gray-900 dark:text-gray-100">Read Ritual</a>
        <ul class="flex space-x-4">
          <li>
            <a href="/books" class="text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100">Books</a>
          </li>
          <% if Current.user %>
            <%= button_to "Logout", session_path, method: :delete, class: "text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-gray-100" %>
          <% end %>
        </ul>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="px-4 sm:px-6 lg:px-8 py-6">
      <%= yield %>
    </main>
    <script>
      function setThemeColor() {
        const isDark = document.documentElement.classList.contains('dark');
        const themeColor = document.querySelector('meta[name="theme-color"]');
        if (themeColor) {
          themeColor.setAttribute('content', isDark ? '#0f172a' : '#ffffff');
        }
      };
      setThemeColor();
      let startY;
      let currentY;
      let isPulling = false;
      const refreshThreshold = 100; // Minimum pull distance to trigger refresh

      document.addEventListener('touchstart', (e) => {
          startY = e.touches[0].clientY;
      });

      document.addEventListener('touchmove', (e) => {
          if (window.scrollY === 0) { // Only activate if at the top of the page
              currentY = e.touches[0].clientY;
              if (currentY > startY) {
                  isPulling = true;
                  const pullDistance = currentY - startY;
                  // Optionally provide visual feedback of pull distance
                  // Example: document.getElementById('refresh-indicator').style.height = `${pullDistance}px`;
              }
          }
      });

      document.addEventListener('touchend', () => {
          if (isPulling) {
              isPulling = false;
              if (currentY - startY >= refreshThreshold) {
                  // Trigger refresh action
                  location.reload(); // Reloads the current page
                  // Or call a function to fetch new data
                  // fetchData();
              }
              // Reset visual feedback, if any
              // Example: document.getElementById('refresh-indicator').style.height = '0';
          }
      });
    </script>
  </body>
</html>
